import * as __WEBPACK_EXTERNAL_MODULE_vitest_config_02c5e5a4__ from "vitest/config";
import * as __WEBPACK_EXTERNAL_MODULE_vitest_node_ace4f808__ from "vitest/node";
import * as __WEBPACK_EXTERNAL_MODULE_path__ from "path";
import * as __WEBPACK_EXTERNAL_MODULE_url__ from "url";
import * as __WEBPACK_EXTERNAL_MODULE_module__ from "module";
const vitest_config_filename = (0, __WEBPACK_EXTERNAL_MODULE_url__.fileURLToPath)(import.meta.url);
const vitest_config_dirname = __WEBPACK_EXTERNAL_MODULE_path__["default"].dirname(vitest_config_filename);
const vitest_config_require = (0, __WEBPACK_EXTERNAL_MODULE_module__.createRequire)(import.meta.url);
async function ensurePackagesInstalled() {
    const installer = new __WEBPACK_EXTERNAL_MODULE_vitest_node_ace4f808__.VitestPackageInstaller();
    const installed = await installer.ensureInstalled('jsdom', process.cwd());
    if (!installed) {
        console.log('ReactLynx Testing Library requires jsdom to be installed.');
        process.exit(1);
    }
}
const createVitestConfig = async (options)=>{
    await ensurePackagesInstalled();
    const runtimePkgName = options?.runtimePkgName ?? '@lynx-js/react';
    function transformReactLynxPlugin() {
        return {
            name: 'transformReactLynxPlugin',
            enforce: 'pre',
            transform (sourceText, sourcePath) {
                const id = sourcePath;
                if (id.endsWith('.css') || id.endsWith('.less') || id.endsWith('.scss')) {
                    if (process.env['DEBUG']) console.log('ignoring css file', id);
                    return '';
                }
                const { transformReactLynxSync } = vitest_config_require('@lynx-js/react/transform');
                const relativePath = __WEBPACK_EXTERNAL_MODULE_path__["default"].relative(vitest_config_dirname, sourcePath);
                const basename = __WEBPACK_EXTERNAL_MODULE_path__["default"].basename(sourcePath);
                const result = transformReactLynxSync(sourceText, {
                    mode: 'test',
                    pluginName: '',
                    filename: basename,
                    sourcemap: true,
                    snapshot: {
                        preserveJsx: false,
                        runtimePkg: `${runtimePkgName}/internal`,
                        jsxImportSource: runtimePkgName,
                        filename: relativePath,
                        target: 'MIXED'
                    },
                    directiveDCE: false,
                    defineDCE: false,
                    shake: false,
                    compat: false,
                    worklet: {
                        filename: relativePath,
                        runtimePkg: `${runtimePkgName}/internal`,
                        target: 'MIXED'
                    },
                    refresh: false,
                    cssScope: false
                });
                if (result.errors.length > 0) result.errors.forEach((error)=>{
                    this.error(error.text, error.location);
                });
                if (result.warnings.length > 0) result.warnings.forEach((warning)=>{
                    this.warn(warning.text, warning.location);
                });
                return {
                    code: result.code,
                    map: result.map
                };
            }
        };
    }
    return (0, __WEBPACK_EXTERNAL_MODULE_vitest_config_02c5e5a4__.defineConfig)({
        server: {
            fs: {
                allow: [
                    __WEBPACK_EXTERNAL_MODULE_path__["default"].join(vitest_config_dirname, '..')
                ]
            }
        },
        plugins: [
            transformReactLynxPlugin()
        ],
        test: {
            environment: vitest_config_require.resolve('./env/vitest'),
            globals: true,
            setupFiles: [
                __WEBPACK_EXTERNAL_MODULE_path__["default"].join(vitest_config_dirname, 'vitest-global-setup')
            ]
        }
    });
};
export { createVitestConfig };
