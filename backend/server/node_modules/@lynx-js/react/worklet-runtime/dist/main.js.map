{
  "version": 3,
  "sources": ["../src/api/element.ts", "../src/api/lepusQuerySelector.ts", "../src/utils/version.ts", "../src/api/lynxApi.ts", "../src/utils/profile.ts", "../src/workletRef.ts", "../src/listeners.ts", "../src/delayWorkletEvent.ts", "../src/jsFunctionLifecycle.ts", "../src/workletRuntime.ts", "../src/index.ts"],
  "sourceRoot": "/home/runner/work/lynx-stack/lynx-stack/packages/react/worklet-runtime/src",
  "sourcesContent": ["// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport class Element {\n  private static willFlush = false;\n\n  // @ts-ignore set in constructor\n  private readonly element: ElementNode;\n\n  constructor(element: ElementNode) {\n    // In Lynx versions prior to and including 2.15,\n    // a crash occurs when printing or transferring refCounted across threads.\n    // Bypass this problem by hiding the element object.\n    Object.defineProperty(this, 'element', {\n      get() {\n        return element;\n      },\n    });\n  }\n\n  public setAttribute(name: string, value: any): void {\n    __SetAttribute(this.element, name, value);\n    this.flushElementTree();\n  }\n\n  public setStyleProperty(name: string, value: string): void {\n    __AddInlineStyle(this.element, name, value);\n    this.flushElementTree();\n  }\n\n  public setStyleProperties(styles: Record<string, string>): void {\n    for (const key in styles) {\n      __AddInlineStyle(this.element, key, styles[key]);\n    }\n    this.flushElementTree();\n  }\n\n  public getAttribute(attributeName: string): any {\n    return __GetAttributeByName(this.element, attributeName);\n  }\n\n  public getAttributeNames(): string[] {\n    return __GetAttributeNames(this.element);\n  }\n\n  public querySelector(selector: string): Element | null {\n    const ref = __QuerySelector(this.element, selector, {});\n    return ref ? new Element(ref) : null;\n  }\n\n  public querySelectorAll(selector: string): Element[] {\n    return __QuerySelectorAll(this.element, selector, {}).map((element) => {\n      return new Element(element);\n    });\n  }\n\n  public invoke(\n    methodName: string,\n    params?: Record<string, any>,\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      __InvokeUIMethod(\n        this.element,\n        methodName,\n        params || {},\n        (res: { code: number; data: any }) => {\n          if (res.code === 0) {\n            resolve(res.data);\n          } else {\n            reject(new Error('UI method invoke: ' + JSON.stringify(res)));\n          }\n        },\n      );\n      this.flushElementTree();\n    });\n  }\n\n  private flushElementTree() {\n    if (Element.willFlush) {\n      return;\n    }\n    Element.willFlush = true;\n    Promise.resolve().then(() => {\n      Element.willFlush = false;\n      __FlushElementTree();\n    });\n  }\n}\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Element } from './element.js';\n\nclass PageElement {\n  private static pageElement: ElementNode | undefined;\n\n  static get() {\n    if (PageElement.pageElement === undefined) {\n      PageElement.pageElement = __GetPageElement();\n    }\n    return PageElement.pageElement;\n  }\n}\n\nexport function querySelector(cssSelector: string): Element | null {\n  const element = __QuerySelector(PageElement.get(), cssSelector, {});\n  return element ? new Element(element) : null;\n}\n\nexport function querySelectorAll(cssSelector: string): Element[] {\n  return __QuerySelectorAll(PageElement.get(), cssSelector, {}).map(\n    (element) => {\n      return new Element(element);\n    },\n  );\n}\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport function isSdkVersionGt(major: number, minor: number): boolean {\n  const lynxSdkVersion: string = SystemInfo.lynxSdkVersion || '1.0';\n  const version = lynxSdkVersion.split('.');\n  return (\n    Number(version[0]) > major\n    || (Number(version[0]) == major && Number(version[1]) > minor)\n  );\n}\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { querySelector, querySelectorAll } from './lepusQuerySelector.js';\nimport { isSdkVersionGt } from '../utils/version.js';\n\nfunction initApiEnv(): void {\n  // @ts-ignore\n  lynx.querySelector = querySelector;\n  // @ts-ignore\n  lynx.querySelectorAll = querySelectorAll;\n  // @ts-ignore\n  globalThis.setTimeout = lynx.setTimeout;\n  // @ts-ignore\n  globalThis.setInterval = lynx.setInterval;\n  // @ts-ignore\n  globalThis.clearTimeout = lynx.clearTimeout;\n  // In lynx 2.14 `clearInterval` is mistakenly spelled as `clearTimeInterval`. This is fixed in lynx 2.15.\n  // @ts-ignore\n  globalThis.clearInterval = lynx.clearInterval ?? lynx.clearTimeInterval;\n\n  {\n    // @ts-ignore\n    const requestAnimationFrame = lynx.requestAnimationFrame;\n    // @ts-ignore\n    lynx.requestAnimationFrame = globalThis.requestAnimationFrame = (\n      callback: () => {},\n    ) => {\n      if (!isSdkVersionGt(2, 15)) {\n        throw new Error(\n          'requestAnimationFrame in main thread script requires Lynx sdk version 2.16',\n        );\n      }\n      return requestAnimationFrame(callback);\n    };\n  }\n\n  // @ts-ignore\n  globalThis.cancelAnimationFrame = lynx.cancelAnimationFrame;\n}\n\nexport { initApiEnv };\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport function profile<Ret, Fn extends (...args: any[]) => Ret>(\n  sliceName: string,\n  f: Fn,\n): Ret {\n  /* v8 ignore next 9 */\n  // TODO: change it to __PROFILE__\n  if (__DEV__) {\n    console.profile(sliceName);\n    try {\n      return f();\n    } finally {\n      console.profileEnd();\n    }\n  } else {\n    return f();\n  }\n}\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Element } from './api/element.js';\nimport type { WorkletRef, WorkletRefId, WorkletRefImpl } from './bindings/types.js';\nimport { profile } from './utils/profile.js';\n\ninterface RefImpl {\n  _workletRefMap: Record<WorkletRefId, WorkletRef<unknown>>;\n  updateWorkletRef(\n    handle: WorkletRefImpl<Element>,\n    element: ElementNode | null,\n  ): void;\n  updateWorkletRefInitValueChanges(patch: [number, unknown][]): void;\n}\n\nlet impl: RefImpl | undefined;\n\nfunction initWorkletRef(): RefImpl {\n  return (impl = {\n    _workletRefMap: {},\n    updateWorkletRef,\n    updateWorkletRefInitValueChanges,\n  });\n}\n\nconst createWorkletRef = <T>(\n  id: WorkletRefId,\n  value: T,\n): WorkletRef<T> => {\n  return {\n    current: value,\n    _wvid: id,\n  };\n};\n\nconst getFromWorkletRefMap = (\n  id: WorkletRefId,\n): WorkletRef<unknown> => {\n  const value = impl!._workletRefMap[id];\n  /* v8 ignore next 3 */\n  if (__DEV__ && value === undefined) {\n    throw new Error('Worklet: ref is not initialized: ' + id);\n  }\n  return value!;\n};\n\nfunction removeValueFromWorkletRefMap(id: WorkletRefId): void {\n  delete impl!._workletRefMap[id];\n}\n\n/**\n * Create an element instance of the given element node, then set worklet value to it.\n * This is called in `snapshotContextUpdateWorkletRef`.\n * @param handle handle of the worklet value.\n * @param element the element node.\n */\nfunction updateWorkletRef(\n  handle: WorkletRefImpl<Element>,\n  element: ElementNode | null,\n): void {\n  getFromWorkletRefMap(handle._wvid).current = element\n    ? new Element(element)\n    : null;\n}\n\nfunction updateWorkletRefInitValueChanges(\n  patch: [WorkletRefId, unknown][],\n): void {\n  profile('updateWorkletRefInitValueChanges', () => {\n    patch.forEach(([id, value]) => {\n      impl!._workletRefMap[id] ??= createWorkletRef(id, value);\n    });\n  });\n}\n\nexport {\n  type RefImpl,\n  initWorkletRef,\n  getFromWorkletRefMap,\n  removeValueFromWorkletRefMap,\n  updateWorkletRefInitValueChanges,\n};\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WorkletEvents } from './bindings/events.js';\nimport type { RunWorkletCtxData, RunWorkletCtxRetData } from './bindings/events.js';\nimport type { ClosureValueType } from './bindings/types.js';\nimport { removeValueFromWorkletRefMap } from './workletRef.js';\n\nfunction initEventListeners(): void {\n  const jsContext = lynx.getJSContext();\n  jsContext.addEventListener(\n    WorkletEvents.runWorkletCtx,\n    (event: RuntimeProxy.Event) => {\n      const data = JSON.parse(event.data as string) as RunWorkletCtxData;\n      const returnValue = runWorklet(data.worklet, data.params as ClosureValueType[]);\n      jsContext.dispatchEvent({\n        type: WorkletEvents.FunctionCallRet,\n        data: JSON.stringify({\n          resolveId: data.resolveId,\n          returnValue,\n        } as RunWorkletCtxRetData),\n      });\n    },\n  );\n  jsContext.addEventListener(\n    WorkletEvents.releaseWorkletRef,\n    (event: RuntimeProxy.Event) => {\n      removeValueFromWorkletRefMap(event.data.id);\n    },\n  );\n}\n\nexport { initEventListeners };\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport type { ClosureValueType, Worklet } from './bindings/types.js';\nimport { profile } from './utils/profile.js';\n\ninterface EventDelayImpl {\n  _delayedWorkletParamsMap: Map<string, ClosureValueType[][]>;\n  runDelayedWorklet(worklet: Worklet, element: ElementNode): void;\n  clearDelayedWorklets(): void;\n}\n\nlet impl: EventDelayImpl | undefined;\n\nfunction initEventDelay(): EventDelayImpl {\n  return (impl = {\n    _delayedWorkletParamsMap: new Map(),\n    runDelayedWorklet,\n    clearDelayedWorklets,\n  });\n}\n\nfunction delayExecUntilJsReady(\n  hash: string,\n  params: ClosureValueType[],\n): void {\n  profile('delayExecUntilJsReady: ' + hash, () => {\n    const map = impl!._delayedWorkletParamsMap;\n    const paramVec = map.get(hash);\n    if (paramVec) {\n      paramVec.push(params);\n    } else {\n      map.set(hash, [params]);\n    }\n  });\n}\n\nfunction runDelayedWorklet(worklet: Worklet, element: ElementNode): void {\n  profile('commitDelayedWorklet', () => {\n    const paramsVec = impl!._delayedWorkletParamsMap.get(\n      worklet._wkltId,\n    );\n    if (paramsVec === undefined) {\n      return;\n    }\n    const leftParamsVec: ClosureValueType[][] = [];\n    paramsVec.forEach((params) => {\n      // @ts-ignore\n      if (params[0]?.currentTarget?.elementRefptr === element) {\n        setTimeout(() => {\n          profile('runDelayedWorklet', () => {\n            runWorklet(worklet, params);\n          });\n        }, 0);\n      } else {\n        leftParamsVec.push(params);\n      }\n    });\n    impl!._delayedWorkletParamsMap.set(\n      worklet._wkltId,\n      leftParamsVec,\n    );\n  });\n}\n\nfunction clearDelayedWorklets(): void {\n  impl!._delayedWorkletParamsMap.clear();\n}\n\nexport { type EventDelayImpl, initEventDelay, delayExecUntilJsReady, runDelayedWorklet, clearDelayedWorklets };\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WorkletEvents } from './bindings/events.js';\nimport { profile } from './utils/profile.js';\nimport { isSdkVersionGt } from './utils/version.js';\n\n/**\n * `JsFunctionLifecycleManager` monitors references to JS function handles to be called by `runOnBackground()`.\n * In JS context, functions to be called by `runOnBackground()` is referenced by `JsFnHandle`s and finally by `execId`.\n * When all `JsFnHandle`s in lepus are released, an event will be sent to JS context to de-ref the `execId`,\n * resulting a de-ref to the js function in JS context.\n */\nclass JsFunctionLifecycleManager {\n  private execIdRefCount = new Map<number, number>();\n  private execIdSetToFire = new Set<number>();\n  private willFire = false;\n  private registry?: FinalizationRegistry<number> = undefined;\n\n  constructor() {\n    this.registry = new FinalizationRegistry<number>(this.removeRef.bind(this));\n  }\n\n  addRef(execId: number, objToRef: object): void {\n    this.execIdRefCount.set(\n      execId,\n      (this.execIdRefCount.get(execId) || 0) + 1,\n    );\n    this.registry!.register(objToRef, execId);\n  }\n\n  removeRef(execId: number): void {\n    const rc = this.execIdRefCount.get(execId)!;\n    if (rc > 1) {\n      this.execIdRefCount.set(execId, rc - 1);\n      return;\n    }\n    this.execIdRefCount.delete(execId);\n    this.execIdSetToFire.add(execId);\n    if (!this.willFire) {\n      this.willFire = true;\n      Promise.resolve().then(() => {\n        this.fire();\n      });\n    }\n  }\n\n  fire(): void {\n    profile('JsFunctionLifecycleManager.fire', () => {\n      lynx.getJSContext().dispatchEvent({\n        type: WorkletEvents.releaseBackgroundWorkletCtx,\n        data: Array.from(this.execIdSetToFire),\n      });\n      this.execIdSetToFire.clear();\n      this.willFire = false;\n    });\n  }\n}\n\nfunction isRunOnBackgroundEnabled(): boolean {\n  return isSdkVersionGt(2, 15);\n}\n\nexport { JsFunctionLifecycleManager, isRunOnBackgroundEnabled };\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Element } from './api/element.js';\nimport type { ClosureValueType, Worklet, WorkletRefImpl } from './bindings/types.js';\nimport { delayExecUntilJsReady, initEventDelay } from './delayWorkletEvent.js';\nimport { isRunOnBackgroundEnabled, JsFunctionLifecycleManager } from './jsFunctionLifecycle.js';\nimport { profile } from './utils/profile.js';\nimport { getFromWorkletRefMap, initWorkletRef } from './workletRef.js';\n\nfunction initWorklet(): void {\n  globalThis.lynxWorkletImpl = {\n    _workletMap: {},\n    _eventDelayImpl: initEventDelay(),\n    _refImpl: initWorkletRef(),\n  };\n\n  if (isRunOnBackgroundEnabled()) {\n    globalThis.lynxWorkletImpl._jsFunctionLifecycleManager = new JsFunctionLifecycleManager();\n  }\n\n  globalThis.registerWorklet = registerWorklet;\n  globalThis.registerWorkletInternal = registerWorklet;\n  globalThis.runWorklet = runWorklet;\n}\n\n/**\n * Register a worklet function, allowing it to be executed by `runWorklet()`.\n * This is called in lepus.js.\n * @param _type worklet type, 'main-thread' or 'ui'\n * @param id worklet hash\n * @param worklet worklet function\n */\nfunction registerWorklet(_type: string, id: string, worklet: Function): void {\n  lynxWorkletImpl._workletMap[id] = worklet;\n}\n\n/**\n * Entrance of all worklet calls.\n * Native event touch handler will call this function.\n * @param ctx worklet object.\n * @param params worklet params.\n */\nfunction runWorklet(ctx: Worklet, params: ClosureValueType[]): unknown {\n  if (!validateWorklet(ctx)) {\n    console.warn('Worklet: Invalid worklet object: ' + JSON.stringify(ctx));\n    return;\n  }\n  if ('_lepusWorkletHash' in ctx) {\n    delayExecUntilJsReady(ctx._lepusWorkletHash, params);\n    return;\n  }\n  return runWorkletImpl(ctx, params);\n}\n\nfunction runWorkletImpl(ctx: Worklet, params: ClosureValueType[]): unknown {\n  const worklet: Function = profile(\n    'transformWorkletCtx ' + ctx._wkltId,\n    () => transformWorklet(ctx, true),\n  );\n  const params_: ClosureValueType[] = profile(\n    'transformWorkletParams',\n    () => transformWorklet(params || [], false),\n  );\n\n  let result;\n  profile('runWorklet', () => {\n    result = worklet(...params_);\n  });\n  return result;\n}\n\nfunction validateWorklet(ctx: unknown): ctx is Worklet {\n  return typeof ctx === 'object' && ctx !== null && ('_wkltId' in ctx || '_lepusWorkletHash' in ctx);\n}\n\nconst workletCache = new WeakMap<object, ClosureValueType | Function>();\n\nfunction transformWorklet(ctx: Worklet, isWorklet: true): Function;\nfunction transformWorklet(\n  ctx: ClosureValueType[],\n  isWorklet: false,\n): ClosureValueType[];\n\nfunction transformWorklet(\n  ctx: ClosureValueType,\n  isWorklet: boolean,\n): ClosureValueType | Function {\n  /* v8 ignore next 3 */\n  if (typeof ctx !== 'object' || ctx === null) {\n    return ctx;\n  }\n\n  if (isWorklet) {\n    const res = workletCache.get(ctx);\n    if (res) {\n      return res;\n    }\n  }\n\n  const worklet = { main: ctx };\n  transformWorkletInner(worklet, 0, ctx);\n\n  if (isWorklet) {\n    workletCache.set(ctx, worklet.main);\n  }\n  return worklet.main;\n}\n\nconst transformWorkletInner = (\n  obj: ClosureValueType,\n  depth: number,\n  ctx: unknown,\n) => {\n  const limit = 1000;\n  if (++depth >= limit) {\n    throw new Error('Depth of value exceeds limit of ' + limit + '.');\n  }\n  /* v8 ignore next 3 */\n  if (typeof obj !== 'object' || obj === null) {\n    return;\n  }\n  for (const key in obj) {\n    // @ts-ignore\n    const subObj: ClosureValueType = obj[key];\n    if (typeof subObj !== 'object' || subObj === null) {\n      continue;\n    }\n\n    const isEventTarget = 'elementRefptr' in subObj;\n    if (!isEventTarget) {\n      transformWorkletInner(subObj, depth, ctx);\n    }\n\n    if (isEventTarget) {\n      // @ts-ignore\n      obj[key] = new Element(subObj['elementRefptr'] as ElementNode);\n      continue;\n    }\n    const isWorkletRef = '_wvid' in (subObj as object);\n    if (isWorkletRef) {\n      // @ts-ignore\n      obj[key] = getFromWorkletRefMap(\n        (subObj as any as WorkletRefImpl<unknown>)._wvid,\n      );\n      continue;\n    }\n    const isWorklet = '_wkltId' in subObj;\n    if (isWorklet) {\n      // `subObj` is worklet ctx. Shallow copy it to prevent the transformed worklet from referencing ctx.\n      // This would result in the value of `workletCache` referencing its key.\n      // @ts-ignore\n      obj[key] = lynxWorkletImpl._workletMap[(subObj as Worklet)._wkltId]!\n        .bind({ ...subObj });\n      continue;\n    }\n    const isJsFn = '_jsFnId' in subObj;\n    if (isJsFn) {\n      subObj['_execId'] = (ctx as Worklet)._execId;\n      lynxWorkletImpl._jsFunctionLifecycleManager?.addRef(\n        (ctx as Worklet)._execId!,\n        subObj,\n      );\n      continue;\n    }\n  }\n};\n\nexport { initWorklet };\n", "// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { initApiEnv } from './api/lynxApi.js';\nimport { initEventListeners } from './listeners.js';\nimport { initWorklet } from './workletRuntime.js';\n\nif (globalThis.lynxWorkletImpl === undefined) {\n  initWorklet();\n  initApiEnv();\n  initEventListeners();\n}\n"],
  "mappings": "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",
  "names": ["impl", "runWorklet"]
}
