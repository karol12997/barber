// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { Element } from './api/element.js';
import { profile } from './utils/profile.js';
let impl;
function initWorkletRef() {
    return (impl = {
        _workletRefMap: {},
        updateWorkletRef,
        updateWorkletRefInitValueChanges,
    });
}
const createWorkletRef = (id, value) => {
    return {
        current: value,
        _wvid: id,
    };
};
const getFromWorkletRefMap = (id) => {
    const value = impl._workletRefMap[id];
    /* v8 ignore next 3 */
    if (__DEV__ && value === undefined) {
        throw new Error('Worklet: ref is not initialized: ' + id);
    }
    return value;
};
function removeValueFromWorkletRefMap(id) {
    delete impl._workletRefMap[id];
}
/**
 * Create an element instance of the given element node, then set worklet value to it.
 * This is called in `snapshotContextUpdateWorkletRef`.
 * @param handle handle of the worklet value.
 * @param element the element node.
 */
function updateWorkletRef(handle, element) {
    getFromWorkletRefMap(handle._wvid).current = element
        ? new Element(element)
        : null;
}
function updateWorkletRefInitValueChanges(patch) {
    profile('updateWorkletRefInitValueChanges', () => {
        patch.forEach(([id, value]) => {
            impl._workletRefMap[id] ??= createWorkletRef(id, value);
        });
    });
}
export { initWorkletRef, getFromWorkletRefMap, removeValueFromWorkletRefMap, updateWorkletRefInitValueChanges, };
//# sourceMappingURL=workletRef.js.map