import { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';
import { addWorkletRefInitValue } from './workletRefPool.js';
import { useMemo } from '../hooks/react.js';
let lastId = 0;
class WorkletRef {
    /**
     * @internal
     */
    _id;
    /**
     * @internal
     */
    _initValue;
    /**
     * @internal
     */
    _type;
    /**
     * @internal
     */
    _lifecycleObserver;
    /**
     * @internal
     */
    constructor(initValue, type) {
        if (__JS__) {
            this._id = ++lastId;
            this._initValue = initValue;
            this._type = type;
            addWorkletRefInitValue(this._id, initValue);
        }
        else {
            // Out of the js thread, the `WorkletRef` class here is just a placeholder and should not be accessed directly.
            // The real WorkletRef will be generated by the worklet runtime.
            this._id = -1;
            this._type = '__LEPUS__';
        }
    }
    get current() {
        if (__JS__ && __DEV__) {
            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed in the background thread.');
        }
        if (__LEPUS__ && __DEV__) {
            /* v8 ignore next */
            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed outside of main thread script.');
        }
        /* v8 ignore next */
        return undefined;
    }
    set current(_) {
        if (__JS__ && __DEV__) {
            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed in the background thread.');
        }
        if (__LEPUS__ && __DEV__) {
            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed outside of main thread script.');
        }
    }
    /**
     * @internal
     */
    toJSON() {
        return {
            _wvid: this._id,
        };
    }
}
/**
 * A `MainThreadRef` is a ref that can only be accessed on the main thread. It is used to preserve
 * states between main thread function calls.
 * The data saved in `current` property of the `MainThreadRef` can be read and written in
 * multiple main thread functions.
 * @public
 */
export class MainThreadRef extends WorkletRef {
    constructor(initValue) {
        super(initValue, 'main-thread');
        if (__JS__) {
            const id = this._id;
            this._lifecycleObserver = lynx.getNativeApp().createJSObjectDestructionObserver?.(() => {
                lynx.getCoreContext?.().dispatchEvent({
                    type: WorkletEvents.releaseWorkletRef,
                    data: {
                        id,
                    },
                });
            });
        }
    }
}
export function useMainThreadRef(initValue) {
    return useMemo(() => {
        return new MainThreadRef(initValue);
    }, []);
}
//# sourceMappingURL=workletRef.js.map