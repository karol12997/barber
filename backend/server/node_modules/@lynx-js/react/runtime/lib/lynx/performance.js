// Copyright 2024 The Lynx Authors. All rights reserved.
// Licensed under the Apache License Version 2.0 that can be found in the
// LICENSE file in the root directory of this source tree.
import { options } from 'preact';
import { DIFF } from '../renderToOpcodes/constants.js';
import { __globalSnapshotPatch } from '../lifecycle/patch/snapshotPatch.js';
var PerformanceTimingKeys;
(function (PerformanceTimingKeys) {
    PerformanceTimingKeys[PerformanceTimingKeys["updateSetStateTrigger"] = 0] = "updateSetStateTrigger";
    PerformanceTimingKeys[PerformanceTimingKeys["updateDiffVdomStart"] = 1] = "updateDiffVdomStart";
    PerformanceTimingKeys[PerformanceTimingKeys["updateDiffVdomEnd"] = 2] = "updateDiffVdomEnd";
    // updateSetStateTrigger, updateDiffVdomStart and updateDiffVdomEnd is deprecated
    PerformanceTimingKeys[PerformanceTimingKeys["diffVdomStart"] = 3] = "diffVdomStart";
    PerformanceTimingKeys[PerformanceTimingKeys["diffVdomEnd"] = 4] = "diffVdomEnd";
    PerformanceTimingKeys[PerformanceTimingKeys["packChangesStart"] = 5] = "packChangesStart";
    PerformanceTimingKeys[PerformanceTimingKeys["packChangesEnd"] = 6] = "packChangesEnd";
    PerformanceTimingKeys[PerformanceTimingKeys["parseChangesStart"] = 7] = "parseChangesStart";
    PerformanceTimingKeys[PerformanceTimingKeys["parseChangesEnd"] = 8] = "parseChangesEnd";
    PerformanceTimingKeys[PerformanceTimingKeys["patchChangesStart"] = 9] = "patchChangesStart";
    PerformanceTimingKeys[PerformanceTimingKeys["patchChangesEnd"] = 10] = "patchChangesEnd";
    PerformanceTimingKeys[PerformanceTimingKeys["hydrateParseSnapshotStart"] = 11] = "hydrateParseSnapshotStart";
    PerformanceTimingKeys[PerformanceTimingKeys["hydrateParseSnapshotEnd"] = 12] = "hydrateParseSnapshotEnd";
    PerformanceTimingKeys[PerformanceTimingKeys["mtsRenderStart"] = 13] = "mtsRenderStart";
    PerformanceTimingKeys[PerformanceTimingKeys["mtsRenderEnd"] = 14] = "mtsRenderEnd";
})(PerformanceTimingKeys || (PerformanceTimingKeys = {}));
const PerformanceTimingFlags = {
    reactLynxHydrate: 'react_lynx_hydrate',
};
const PipelineOrigins = {
    reactLynxHydrate: 'reactLynxHydrate',
    updateTriggeredByBts: 'updateTriggeredByBts',
};
/**
 * @deprecated used by old timing api(setState timing flag)
 */
const PerfSpecificKey = '__lynx_timing_flag';
let timingFlag;
let shouldMarkDiffVdomStart = false;
let shouldMarkDiffVdomEnd = false;
let globalPipelineOptions;
/**
 * @deprecated used by old timing api(setState timing flag)
 */
function markTimingLegacy(key, timingFlag_) {
    switch (key) {
        case PerformanceTimingKeys.updateSetStateTrigger: {
            shouldMarkDiffVdomStart = true;
            shouldMarkDiffVdomEnd = true;
            timingFlag = timingFlag_;
            break;
        }
        case PerformanceTimingKeys.updateDiffVdomStart: {
            /* v8 ignore start */
            if (!shouldMarkDiffVdomStart) {
                return;
            }
            /* v8 ignore stop */
            shouldMarkDiffVdomStart = false;
            break;
        }
        case PerformanceTimingKeys.updateDiffVdomEnd: {
            if (!shouldMarkDiffVdomEnd) {
                return;
            }
            shouldMarkDiffVdomEnd = false;
            break;
        }
    }
    lynx.getNativeApp().markTiming?.(timingFlag, PerformanceTimingKeys[key]);
}
function beginPipeline(needTimestamps, pipelineOrigin, timingFlag) {
    globalPipelineOptions = lynx.performance?._generatePipelineOptions?.();
    if (globalPipelineOptions) {
        globalPipelineOptions.needTimestamps = needTimestamps;
        globalPipelineOptions.pipelineOrigin = pipelineOrigin;
        globalPipelineOptions.dsl = 'reactLynx';
        switch (pipelineOrigin) {
            case PipelineOrigins.reactLynxHydrate:
                globalPipelineOptions.stage = 'hydrate';
                break;
            case PipelineOrigins.updateTriggeredByBts:
                globalPipelineOptions.stage = 'update';
                break;
        }
        lynx.performance?._onPipelineStart?.(globalPipelineOptions.pipelineID, globalPipelineOptions);
        if (timingFlag) {
            lynx.performance?._bindPipelineIdWithTimingFlag?.(globalPipelineOptions.pipelineID, timingFlag);
        }
    }
}
function setPipeline(pipeline) {
    globalPipelineOptions = pipeline;
}
function markTiming(timestampKey, force) {
    if (globalPipelineOptions && (force || globalPipelineOptions.needTimestamps)) {
        lynx.performance?._markTiming?.(globalPipelineOptions.pipelineID, PerformanceTimingKeys[timestampKey]);
    }
}
function initTimingAPI() {
    const oldDiff = options[DIFF];
    options[DIFF] = (vnode) => {
        // check `__globalSnapshotPatch` to make sure this only runs after hydrate
        if (__JS__ && __globalSnapshotPatch) {
            if (!globalPipelineOptions) {
                beginPipeline(false, PipelineOrigins.updateTriggeredByBts);
                markTiming(PerformanceTimingKeys.diffVdomStart, true);
            }
            if (shouldMarkDiffVdomStart) {
                markTimingLegacy(PerformanceTimingKeys.updateDiffVdomStart);
            }
        }
        oldDiff?.(vnode);
    };
}
/**
 * @internal
 */
export { PerformanceTimingKeys, PerformanceTimingFlags, PipelineOrigins, PerfSpecificKey, markTimingLegacy, initTimingAPI, beginPipeline, markTiming, setPipeline, globalPipelineOptions, };
//# sourceMappingURL=performance.js.map